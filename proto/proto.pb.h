// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#ifndef PROTOBUF_proto_2eproto__INCLUDED
#define PROTOBUF_proto_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2eproto();
void protobuf_AssignDesc_proto_2eproto();
void protobuf_ShutdownFile_proto_2eproto();

class Vector3d;
class WingbeatSample;
class WingbeatData;
class TrajectorySample;
class TrajectoryData;
class BigBirdConstructionData;
class BirdOptimizerResult;
class BirdOptimizerData;

// ===================================================================

class Vector3d : public ::google::protobuf::Message {
 public:
  Vector3d();
  virtual ~Vector3d();
  
  Vector3d(const Vector3d& from);
  
  inline Vector3d& operator=(const Vector3d& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Vector3d& default_instance();
  
  void Swap(Vector3d* other);
  
  // implements Message ----------------------------------------------
  
  Vector3d* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Vector3d& from);
  void MergeFrom(const Vector3d& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:proto.Vector3d)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static Vector3d* default_instance_;
};
// -------------------------------------------------------------------

class WingbeatSample : public ::google::protobuf::Message {
 public:
  WingbeatSample();
  virtual ~WingbeatSample();
  
  WingbeatSample(const WingbeatSample& from);
  
  inline WingbeatSample& operator=(const WingbeatSample& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingbeatSample& default_instance();
  
  void Swap(WingbeatSample* other);
  
  // implements Message ----------------------------------------------
  
  WingbeatSample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingbeatSample& from);
  void MergeFrom(const WingbeatSample& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float wing = 1;
  inline bool has_wing() const;
  inline void clear_wing();
  static const int kWingFieldNumber = 1;
  inline float wing() const;
  inline void set_wing(float value);
  
  // required float feather = 2;
  inline bool has_feather() const;
  inline void clear_feather();
  static const int kFeatherFieldNumber = 2;
  inline float feather() const;
  inline void set_feather(float value);
  
  // @@protoc_insertion_point(class_scope:proto.WingbeatSample)
 private:
  inline void set_has_wing();
  inline void clear_has_wing();
  inline void set_has_feather();
  inline void clear_has_feather();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float wing_;
  float feather_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static WingbeatSample* default_instance_;
};
// -------------------------------------------------------------------

class WingbeatData : public ::google::protobuf::Message {
 public:
  WingbeatData();
  virtual ~WingbeatData();
  
  WingbeatData(const WingbeatData& from);
  
  inline WingbeatData& operator=(const WingbeatData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const WingbeatData& default_instance();
  
  void Swap(WingbeatData* other);
  
  // implements Message ----------------------------------------------
  
  WingbeatData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WingbeatData& from);
  void MergeFrom(const WingbeatData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .proto.WingbeatSample sample = 1;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 1;
  inline const ::proto::WingbeatSample& sample(int index) const;
  inline ::proto::WingbeatSample* mutable_sample(int index);
  inline ::proto::WingbeatSample* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::WingbeatSample >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::WingbeatSample >*
      mutable_sample();
  
  // @@protoc_insertion_point(class_scope:proto.WingbeatData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::proto::WingbeatSample > sample_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static WingbeatData* default_instance_;
};
// -------------------------------------------------------------------

class TrajectorySample : public ::google::protobuf::Message {
 public:
  TrajectorySample();
  virtual ~TrajectorySample();
  
  TrajectorySample(const TrajectorySample& from);
  
  inline TrajectorySample& operator=(const TrajectorySample& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectorySample& default_instance();
  
  void Swap(TrajectorySample* other);
  
  // implements Message ----------------------------------------------
  
  TrajectorySample* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectorySample& from);
  void MergeFrom(const TrajectorySample& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .proto.Vector3d pelvisPosition = 1;
  inline bool has_pelvisposition() const;
  inline void clear_pelvisposition();
  static const int kPelvisPositionFieldNumber = 1;
  inline const ::proto::Vector3d& pelvisposition() const;
  inline ::proto::Vector3d* mutable_pelvisposition();
  inline ::proto::Vector3d* release_pelvisposition();
  
  // required float leftWingImpulse = 2;
  inline bool has_leftwingimpulse() const;
  inline void clear_leftwingimpulse();
  static const int kLeftWingImpulseFieldNumber = 2;
  inline float leftwingimpulse() const;
  inline void set_leftwingimpulse(float value);
  
  // required float rightWingImpulse = 3;
  inline bool has_rightwingimpulse() const;
  inline void clear_rightwingimpulse();
  static const int kRightWingImpulseFieldNumber = 3;
  inline float rightwingimpulse() const;
  inline void set_rightwingimpulse(float value);
  
  // required float leftFeatherImpulse = 4;
  inline bool has_leftfeatherimpulse() const;
  inline void clear_leftfeatherimpulse();
  static const int kLeftFeatherImpulseFieldNumber = 4;
  inline float leftfeatherimpulse() const;
  inline void set_leftfeatherimpulse(float value);
  
  // required float rightFeatherImpulse = 5;
  inline bool has_rightfeatherimpulse() const;
  inline void clear_rightfeatherimpulse();
  static const int kRightFeatherImpulseFieldNumber = 5;
  inline float rightfeatherimpulse() const;
  inline void set_rightfeatherimpulse(float value);
  
  // @@protoc_insertion_point(class_scope:proto.TrajectorySample)
 private:
  inline void set_has_pelvisposition();
  inline void clear_has_pelvisposition();
  inline void set_has_leftwingimpulse();
  inline void clear_has_leftwingimpulse();
  inline void set_has_rightwingimpulse();
  inline void clear_has_rightwingimpulse();
  inline void set_has_leftfeatherimpulse();
  inline void clear_has_leftfeatherimpulse();
  inline void set_has_rightfeatherimpulse();
  inline void clear_has_rightfeatherimpulse();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::proto::Vector3d* pelvisposition_;
  float leftwingimpulse_;
  float rightwingimpulse_;
  float leftfeatherimpulse_;
  float rightfeatherimpulse_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static TrajectorySample* default_instance_;
};
// -------------------------------------------------------------------

class TrajectoryData : public ::google::protobuf::Message {
 public:
  TrajectoryData();
  virtual ~TrajectoryData();
  
  TrajectoryData(const TrajectoryData& from);
  
  inline TrajectoryData& operator=(const TrajectoryData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TrajectoryData& default_instance();
  
  void Swap(TrajectoryData* other);
  
  // implements Message ----------------------------------------------
  
  TrajectoryData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrajectoryData& from);
  void MergeFrom(const TrajectoryData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .proto.TrajectorySample sample = 1;
  inline int sample_size() const;
  inline void clear_sample();
  static const int kSampleFieldNumber = 1;
  inline const ::proto::TrajectorySample& sample(int index) const;
  inline ::proto::TrajectorySample* mutable_sample(int index);
  inline ::proto::TrajectorySample* add_sample();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::TrajectorySample >&
      sample() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::TrajectorySample >*
      mutable_sample();
  
  // @@protoc_insertion_point(class_scope:proto.TrajectoryData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::proto::TrajectorySample > sample_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static TrajectoryData* default_instance_;
};
// -------------------------------------------------------------------

class BigBirdConstructionData : public ::google::protobuf::Message {
 public:
  BigBirdConstructionData();
  virtual ~BigBirdConstructionData();
  
  BigBirdConstructionData(const BigBirdConstructionData& from);
  
  inline BigBirdConstructionData& operator=(const BigBirdConstructionData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BigBirdConstructionData& default_instance();
  
  void Swap(BigBirdConstructionData* other);
  
  // implements Message ----------------------------------------------
  
  BigBirdConstructionData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BigBirdConstructionData& from);
  void MergeFrom(const BigBirdConstructionData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float pelvisHalfLength = 1;
  inline bool has_pelvishalflength() const;
  inline void clear_pelvishalflength();
  static const int kPelvisHalfLengthFieldNumber = 1;
  inline float pelvishalflength() const;
  inline void set_pelvishalflength(float value);
  
  // required float wingHalfLength = 2;
  inline bool has_winghalflength() const;
  inline void clear_winghalflength();
  static const int kWingHalfLengthFieldNumber = 2;
  inline float winghalflength() const;
  inline void set_winghalflength(float value);
  
  // required float hoistAngleXY = 3;
  inline bool has_hoistanglexy() const;
  inline void clear_hoistanglexy();
  static const int kHoistAngleXYFieldNumber = 3;
  inline float hoistanglexy() const;
  inline void set_hoistanglexy(float value);
  
  // required float hoistAngleZXY = 4;
  inline bool has_hoistanglezxy() const;
  inline void clear_hoistanglezxy();
  static const int kHoistAngleZXYFieldNumber = 4;
  inline float hoistanglezxy() const;
  inline void set_hoistanglezxy(float value);
  
  // required float hoistMass = 5;
  inline bool has_hoistmass() const;
  inline void clear_hoistmass();
  static const int kHoistMassFieldNumber = 5;
  inline float hoistmass() const;
  inline void set_hoistmass(float value);
  
  // required float pelvisMass = 6;
  inline bool has_pelvismass() const;
  inline void clear_pelvismass();
  static const int kPelvisMassFieldNumber = 6;
  inline float pelvismass() const;
  inline void set_pelvismass(float value);
  
  // required float wingMass = 7;
  inline bool has_wingmass() const;
  inline void clear_wingmass();
  static const int kWingMassFieldNumber = 7;
  inline float wingmass() const;
  inline void set_wingmass(float value);
  
  // optional float featherArea = 8;
  inline bool has_featherarea() const;
  inline void clear_featherarea();
  static const int kFeatherAreaFieldNumber = 8;
  inline float featherarea() const;
  inline void set_featherarea(float value);
  
  // required .proto.Vector3d pelvisRelPosToAttachWing = 9;
  inline bool has_pelvisrelpostoattachwing() const;
  inline void clear_pelvisrelpostoattachwing();
  static const int kPelvisRelPosToAttachWingFieldNumber = 9;
  inline const ::proto::Vector3d& pelvisrelpostoattachwing() const;
  inline ::proto::Vector3d* mutable_pelvisrelpostoattachwing();
  inline ::proto::Vector3d* release_pelvisrelpostoattachwing();
  
  // required .proto.Vector3d featherRelPosToAttachFeather = 10;
  inline bool has_featherrelpostoattachfeather() const;
  inline void clear_featherrelpostoattachfeather();
  static const int kFeatherRelPosToAttachFeatherFieldNumber = 10;
  inline const ::proto::Vector3d& featherrelpostoattachfeather() const;
  inline ::proto::Vector3d* mutable_featherrelpostoattachfeather();
  inline ::proto::Vector3d* release_featherrelpostoattachfeather();
  
  // required float wingFlapMotorMaxImpulse = 11;
  inline bool has_wingflapmotormaximpulse() const;
  inline void clear_wingflapmotormaximpulse();
  static const int kWingFlapMotorMaxImpulseFieldNumber = 11;
  inline float wingflapmotormaximpulse() const;
  inline void set_wingflapmotormaximpulse(float value);
  
  // required float wingFlapHingeLimit = 12;
  inline bool has_wingflaphingelimit() const;
  inline void clear_wingflaphingelimit();
  static const int kWingFlapHingeLimitFieldNumber = 12;
  inline float wingflaphingelimit() const;
  inline void set_wingflaphingelimit(float value);
  
  // required float featherAoAMotorMaxImpulse = 13;
  inline bool has_featheraoamotormaximpulse() const;
  inline void clear_featheraoamotormaximpulse();
  static const int kFeatherAoAMotorMaxImpulseFieldNumber = 13;
  inline float featheraoamotormaximpulse() const;
  inline void set_featheraoamotormaximpulse(float value);
  
  // required float featherAoAHingeLimit = 14;
  inline bool has_featheraoahingelimit() const;
  inline void clear_featheraoahingelimit();
  static const int kFeatherAoAHingeLimitFieldNumber = 14;
  inline float featheraoahingelimit() const;
  inline void set_featheraoahingelimit(float value);
  
  // required int32 randSeed = 15;
  inline bool has_randseed() const;
  inline void clear_randseed();
  static const int kRandSeedFieldNumber = 15;
  inline ::google::protobuf::int32 randseed() const;
  inline void set_randseed(::google::protobuf::int32 value);
  
  // required .proto.WingbeatData wingbeatData = 16;
  inline bool has_wingbeatdata() const;
  inline void clear_wingbeatdata();
  static const int kWingbeatDataFieldNumber = 16;
  inline const ::proto::WingbeatData& wingbeatdata() const;
  inline ::proto::WingbeatData* mutable_wingbeatdata();
  inline ::proto::WingbeatData* release_wingbeatdata();
  
  // @@protoc_insertion_point(class_scope:proto.BigBirdConstructionData)
 private:
  inline void set_has_pelvishalflength();
  inline void clear_has_pelvishalflength();
  inline void set_has_winghalflength();
  inline void clear_has_winghalflength();
  inline void set_has_hoistanglexy();
  inline void clear_has_hoistanglexy();
  inline void set_has_hoistanglezxy();
  inline void clear_has_hoistanglezxy();
  inline void set_has_hoistmass();
  inline void clear_has_hoistmass();
  inline void set_has_pelvismass();
  inline void clear_has_pelvismass();
  inline void set_has_wingmass();
  inline void clear_has_wingmass();
  inline void set_has_featherarea();
  inline void clear_has_featherarea();
  inline void set_has_pelvisrelpostoattachwing();
  inline void clear_has_pelvisrelpostoattachwing();
  inline void set_has_featherrelpostoattachfeather();
  inline void clear_has_featherrelpostoattachfeather();
  inline void set_has_wingflapmotormaximpulse();
  inline void clear_has_wingflapmotormaximpulse();
  inline void set_has_wingflaphingelimit();
  inline void clear_has_wingflaphingelimit();
  inline void set_has_featheraoamotormaximpulse();
  inline void clear_has_featheraoamotormaximpulse();
  inline void set_has_featheraoahingelimit();
  inline void clear_has_featheraoahingelimit();
  inline void set_has_randseed();
  inline void clear_has_randseed();
  inline void set_has_wingbeatdata();
  inline void clear_has_wingbeatdata();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float pelvishalflength_;
  float winghalflength_;
  float hoistanglexy_;
  float hoistanglezxy_;
  float hoistmass_;
  float pelvismass_;
  float wingmass_;
  float featherarea_;
  ::proto::Vector3d* pelvisrelpostoattachwing_;
  ::proto::Vector3d* featherrelpostoattachfeather_;
  float wingflapmotormaximpulse_;
  float wingflaphingelimit_;
  float featheraoamotormaximpulse_;
  float featheraoahingelimit_;
  ::proto::WingbeatData* wingbeatdata_;
  ::google::protobuf::int32 randseed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static BigBirdConstructionData* default_instance_;
};
// -------------------------------------------------------------------

class BirdOptimizerResult : public ::google::protobuf::Message {
 public:
  BirdOptimizerResult();
  virtual ~BirdOptimizerResult();
  
  BirdOptimizerResult(const BirdOptimizerResult& from);
  
  inline BirdOptimizerResult& operator=(const BirdOptimizerResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BirdOptimizerResult& default_instance();
  
  void Swap(BirdOptimizerResult* other);
  
  // implements Message ----------------------------------------------
  
  BirdOptimizerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BirdOptimizerResult& from);
  void MergeFrom(const BirdOptimizerResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .proto.BigBirdConstructionData bird = 1;
  inline bool has_bird() const;
  inline void clear_bird();
  static const int kBirdFieldNumber = 1;
  inline const ::proto::BigBirdConstructionData& bird() const;
  inline ::proto::BigBirdConstructionData* mutable_bird();
  inline ::proto::BigBirdConstructionData* release_bird();
  
  // required float cum_energy = 2;
  inline bool has_cum_energy() const;
  inline void clear_cum_energy();
  static const int kCumEnergyFieldNumber = 2;
  inline float cum_energy() const;
  inline void set_cum_energy(float value);
  
  // @@protoc_insertion_point(class_scope:proto.BirdOptimizerResult)
 private:
  inline void set_has_bird();
  inline void clear_has_bird();
  inline void set_has_cum_energy();
  inline void clear_has_cum_energy();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::proto::BigBirdConstructionData* bird_;
  float cum_energy_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static BirdOptimizerResult* default_instance_;
};
// -------------------------------------------------------------------

class BirdOptimizerData : public ::google::protobuf::Message {
 public:
  BirdOptimizerData();
  virtual ~BirdOptimizerData();
  
  BirdOptimizerData(const BirdOptimizerData& from);
  
  inline BirdOptimizerData& operator=(const BirdOptimizerData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BirdOptimizerData& default_instance();
  
  void Swap(BirdOptimizerData* other);
  
  // implements Message ----------------------------------------------
  
  BirdOptimizerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BirdOptimizerData& from);
  void MergeFrom(const BirdOptimizerData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .proto.BirdOptimizerResult result = 1;
  inline int result_size() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline const ::proto::BirdOptimizerResult& result(int index) const;
  inline ::proto::BirdOptimizerResult* mutable_result(int index);
  inline ::proto::BirdOptimizerResult* add_result();
  inline const ::google::protobuf::RepeatedPtrField< ::proto::BirdOptimizerResult >&
      result() const;
  inline ::google::protobuf::RepeatedPtrField< ::proto::BirdOptimizerResult >*
      mutable_result();
  
  // @@protoc_insertion_point(class_scope:proto.BirdOptimizerData)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::proto::BirdOptimizerResult > result_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_proto_2eproto();
  friend void protobuf_AssignDesc_proto_2eproto();
  friend void protobuf_ShutdownFile_proto_2eproto();
  
  void InitAsDefaultInstance();
  static BirdOptimizerData* default_instance_;
};
// ===================================================================


// ===================================================================

// Vector3d

// required float x = 1;
inline bool Vector3d::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Vector3d::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Vector3d::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Vector3d::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Vector3d::x() const {
  return x_;
}
inline void Vector3d::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool Vector3d::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Vector3d::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Vector3d::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Vector3d::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Vector3d::y() const {
  return y_;
}
inline void Vector3d::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool Vector3d::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Vector3d::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Vector3d::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Vector3d::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Vector3d::z() const {
  return z_;
}
inline void Vector3d::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// WingbeatSample

// required float wing = 1;
inline bool WingbeatSample::has_wing() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WingbeatSample::set_has_wing() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WingbeatSample::clear_has_wing() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WingbeatSample::clear_wing() {
  wing_ = 0;
  clear_has_wing();
}
inline float WingbeatSample::wing() const {
  return wing_;
}
inline void WingbeatSample::set_wing(float value) {
  set_has_wing();
  wing_ = value;
}

// required float feather = 2;
inline bool WingbeatSample::has_feather() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WingbeatSample::set_has_feather() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WingbeatSample::clear_has_feather() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WingbeatSample::clear_feather() {
  feather_ = 0;
  clear_has_feather();
}
inline float WingbeatSample::feather() const {
  return feather_;
}
inline void WingbeatSample::set_feather(float value) {
  set_has_feather();
  feather_ = value;
}

// -------------------------------------------------------------------

// WingbeatData

// repeated .proto.WingbeatSample sample = 1;
inline int WingbeatData::sample_size() const {
  return sample_.size();
}
inline void WingbeatData::clear_sample() {
  sample_.Clear();
}
inline const ::proto::WingbeatSample& WingbeatData::sample(int index) const {
  return sample_.Get(index);
}
inline ::proto::WingbeatSample* WingbeatData::mutable_sample(int index) {
  return sample_.Mutable(index);
}
inline ::proto::WingbeatSample* WingbeatData::add_sample() {
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::WingbeatSample >&
WingbeatData::sample() const {
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::WingbeatSample >*
WingbeatData::mutable_sample() {
  return &sample_;
}

// -------------------------------------------------------------------

// TrajectorySample

// required .proto.Vector3d pelvisPosition = 1;
inline bool TrajectorySample::has_pelvisposition() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrajectorySample::set_has_pelvisposition() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrajectorySample::clear_has_pelvisposition() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrajectorySample::clear_pelvisposition() {
  if (pelvisposition_ != NULL) pelvisposition_->::proto::Vector3d::Clear();
  clear_has_pelvisposition();
}
inline const ::proto::Vector3d& TrajectorySample::pelvisposition() const {
  return pelvisposition_ != NULL ? *pelvisposition_ : *default_instance_->pelvisposition_;
}
inline ::proto::Vector3d* TrajectorySample::mutable_pelvisposition() {
  set_has_pelvisposition();
  if (pelvisposition_ == NULL) pelvisposition_ = new ::proto::Vector3d;
  return pelvisposition_;
}
inline ::proto::Vector3d* TrajectorySample::release_pelvisposition() {
  clear_has_pelvisposition();
  ::proto::Vector3d* temp = pelvisposition_;
  pelvisposition_ = NULL;
  return temp;
}

// required float leftWingImpulse = 2;
inline bool TrajectorySample::has_leftwingimpulse() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrajectorySample::set_has_leftwingimpulse() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrajectorySample::clear_has_leftwingimpulse() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrajectorySample::clear_leftwingimpulse() {
  leftwingimpulse_ = 0;
  clear_has_leftwingimpulse();
}
inline float TrajectorySample::leftwingimpulse() const {
  return leftwingimpulse_;
}
inline void TrajectorySample::set_leftwingimpulse(float value) {
  set_has_leftwingimpulse();
  leftwingimpulse_ = value;
}

// required float rightWingImpulse = 3;
inline bool TrajectorySample::has_rightwingimpulse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrajectorySample::set_has_rightwingimpulse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrajectorySample::clear_has_rightwingimpulse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrajectorySample::clear_rightwingimpulse() {
  rightwingimpulse_ = 0;
  clear_has_rightwingimpulse();
}
inline float TrajectorySample::rightwingimpulse() const {
  return rightwingimpulse_;
}
inline void TrajectorySample::set_rightwingimpulse(float value) {
  set_has_rightwingimpulse();
  rightwingimpulse_ = value;
}

// required float leftFeatherImpulse = 4;
inline bool TrajectorySample::has_leftfeatherimpulse() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrajectorySample::set_has_leftfeatherimpulse() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrajectorySample::clear_has_leftfeatherimpulse() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrajectorySample::clear_leftfeatherimpulse() {
  leftfeatherimpulse_ = 0;
  clear_has_leftfeatherimpulse();
}
inline float TrajectorySample::leftfeatherimpulse() const {
  return leftfeatherimpulse_;
}
inline void TrajectorySample::set_leftfeatherimpulse(float value) {
  set_has_leftfeatherimpulse();
  leftfeatherimpulse_ = value;
}

// required float rightFeatherImpulse = 5;
inline bool TrajectorySample::has_rightfeatherimpulse() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrajectorySample::set_has_rightfeatherimpulse() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrajectorySample::clear_has_rightfeatherimpulse() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrajectorySample::clear_rightfeatherimpulse() {
  rightfeatherimpulse_ = 0;
  clear_has_rightfeatherimpulse();
}
inline float TrajectorySample::rightfeatherimpulse() const {
  return rightfeatherimpulse_;
}
inline void TrajectorySample::set_rightfeatherimpulse(float value) {
  set_has_rightfeatherimpulse();
  rightfeatherimpulse_ = value;
}

// -------------------------------------------------------------------

// TrajectoryData

// repeated .proto.TrajectorySample sample = 1;
inline int TrajectoryData::sample_size() const {
  return sample_.size();
}
inline void TrajectoryData::clear_sample() {
  sample_.Clear();
}
inline const ::proto::TrajectorySample& TrajectoryData::sample(int index) const {
  return sample_.Get(index);
}
inline ::proto::TrajectorySample* TrajectoryData::mutable_sample(int index) {
  return sample_.Mutable(index);
}
inline ::proto::TrajectorySample* TrajectoryData::add_sample() {
  return sample_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::TrajectorySample >&
TrajectoryData::sample() const {
  return sample_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::TrajectorySample >*
TrajectoryData::mutable_sample() {
  return &sample_;
}

// -------------------------------------------------------------------

// BigBirdConstructionData

// required float pelvisHalfLength = 1;
inline bool BigBirdConstructionData::has_pelvishalflength() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BigBirdConstructionData::set_has_pelvishalflength() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BigBirdConstructionData::clear_has_pelvishalflength() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BigBirdConstructionData::clear_pelvishalflength() {
  pelvishalflength_ = 0;
  clear_has_pelvishalflength();
}
inline float BigBirdConstructionData::pelvishalflength() const {
  return pelvishalflength_;
}
inline void BigBirdConstructionData::set_pelvishalflength(float value) {
  set_has_pelvishalflength();
  pelvishalflength_ = value;
}

// required float wingHalfLength = 2;
inline bool BigBirdConstructionData::has_winghalflength() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BigBirdConstructionData::set_has_winghalflength() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BigBirdConstructionData::clear_has_winghalflength() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BigBirdConstructionData::clear_winghalflength() {
  winghalflength_ = 0;
  clear_has_winghalflength();
}
inline float BigBirdConstructionData::winghalflength() const {
  return winghalflength_;
}
inline void BigBirdConstructionData::set_winghalflength(float value) {
  set_has_winghalflength();
  winghalflength_ = value;
}

// required float hoistAngleXY = 3;
inline bool BigBirdConstructionData::has_hoistanglexy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BigBirdConstructionData::set_has_hoistanglexy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BigBirdConstructionData::clear_has_hoistanglexy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BigBirdConstructionData::clear_hoistanglexy() {
  hoistanglexy_ = 0;
  clear_has_hoistanglexy();
}
inline float BigBirdConstructionData::hoistanglexy() const {
  return hoistanglexy_;
}
inline void BigBirdConstructionData::set_hoistanglexy(float value) {
  set_has_hoistanglexy();
  hoistanglexy_ = value;
}

// required float hoistAngleZXY = 4;
inline bool BigBirdConstructionData::has_hoistanglezxy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BigBirdConstructionData::set_has_hoistanglezxy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BigBirdConstructionData::clear_has_hoistanglezxy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BigBirdConstructionData::clear_hoistanglezxy() {
  hoistanglezxy_ = 0;
  clear_has_hoistanglezxy();
}
inline float BigBirdConstructionData::hoistanglezxy() const {
  return hoistanglezxy_;
}
inline void BigBirdConstructionData::set_hoistanglezxy(float value) {
  set_has_hoistanglezxy();
  hoistanglezxy_ = value;
}

// required float hoistMass = 5;
inline bool BigBirdConstructionData::has_hoistmass() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BigBirdConstructionData::set_has_hoistmass() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BigBirdConstructionData::clear_has_hoistmass() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BigBirdConstructionData::clear_hoistmass() {
  hoistmass_ = 0;
  clear_has_hoistmass();
}
inline float BigBirdConstructionData::hoistmass() const {
  return hoistmass_;
}
inline void BigBirdConstructionData::set_hoistmass(float value) {
  set_has_hoistmass();
  hoistmass_ = value;
}

// required float pelvisMass = 6;
inline bool BigBirdConstructionData::has_pelvismass() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BigBirdConstructionData::set_has_pelvismass() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BigBirdConstructionData::clear_has_pelvismass() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BigBirdConstructionData::clear_pelvismass() {
  pelvismass_ = 0;
  clear_has_pelvismass();
}
inline float BigBirdConstructionData::pelvismass() const {
  return pelvismass_;
}
inline void BigBirdConstructionData::set_pelvismass(float value) {
  set_has_pelvismass();
  pelvismass_ = value;
}

// required float wingMass = 7;
inline bool BigBirdConstructionData::has_wingmass() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BigBirdConstructionData::set_has_wingmass() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BigBirdConstructionData::clear_has_wingmass() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BigBirdConstructionData::clear_wingmass() {
  wingmass_ = 0;
  clear_has_wingmass();
}
inline float BigBirdConstructionData::wingmass() const {
  return wingmass_;
}
inline void BigBirdConstructionData::set_wingmass(float value) {
  set_has_wingmass();
  wingmass_ = value;
}

// optional float featherArea = 8;
inline bool BigBirdConstructionData::has_featherarea() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BigBirdConstructionData::set_has_featherarea() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BigBirdConstructionData::clear_has_featherarea() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BigBirdConstructionData::clear_featherarea() {
  featherarea_ = 0;
  clear_has_featherarea();
}
inline float BigBirdConstructionData::featherarea() const {
  return featherarea_;
}
inline void BigBirdConstructionData::set_featherarea(float value) {
  set_has_featherarea();
  featherarea_ = value;
}

// required .proto.Vector3d pelvisRelPosToAttachWing = 9;
inline bool BigBirdConstructionData::has_pelvisrelpostoattachwing() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BigBirdConstructionData::set_has_pelvisrelpostoattachwing() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BigBirdConstructionData::clear_has_pelvisrelpostoattachwing() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BigBirdConstructionData::clear_pelvisrelpostoattachwing() {
  if (pelvisrelpostoattachwing_ != NULL) pelvisrelpostoattachwing_->::proto::Vector3d::Clear();
  clear_has_pelvisrelpostoattachwing();
}
inline const ::proto::Vector3d& BigBirdConstructionData::pelvisrelpostoattachwing() const {
  return pelvisrelpostoattachwing_ != NULL ? *pelvisrelpostoattachwing_ : *default_instance_->pelvisrelpostoattachwing_;
}
inline ::proto::Vector3d* BigBirdConstructionData::mutable_pelvisrelpostoattachwing() {
  set_has_pelvisrelpostoattachwing();
  if (pelvisrelpostoattachwing_ == NULL) pelvisrelpostoattachwing_ = new ::proto::Vector3d;
  return pelvisrelpostoattachwing_;
}
inline ::proto::Vector3d* BigBirdConstructionData::release_pelvisrelpostoattachwing() {
  clear_has_pelvisrelpostoattachwing();
  ::proto::Vector3d* temp = pelvisrelpostoattachwing_;
  pelvisrelpostoattachwing_ = NULL;
  return temp;
}

// required .proto.Vector3d featherRelPosToAttachFeather = 10;
inline bool BigBirdConstructionData::has_featherrelpostoattachfeather() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BigBirdConstructionData::set_has_featherrelpostoattachfeather() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BigBirdConstructionData::clear_has_featherrelpostoattachfeather() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BigBirdConstructionData::clear_featherrelpostoattachfeather() {
  if (featherrelpostoattachfeather_ != NULL) featherrelpostoattachfeather_->::proto::Vector3d::Clear();
  clear_has_featherrelpostoattachfeather();
}
inline const ::proto::Vector3d& BigBirdConstructionData::featherrelpostoattachfeather() const {
  return featherrelpostoattachfeather_ != NULL ? *featherrelpostoattachfeather_ : *default_instance_->featherrelpostoattachfeather_;
}
inline ::proto::Vector3d* BigBirdConstructionData::mutable_featherrelpostoattachfeather() {
  set_has_featherrelpostoattachfeather();
  if (featherrelpostoattachfeather_ == NULL) featherrelpostoattachfeather_ = new ::proto::Vector3d;
  return featherrelpostoattachfeather_;
}
inline ::proto::Vector3d* BigBirdConstructionData::release_featherrelpostoattachfeather() {
  clear_has_featherrelpostoattachfeather();
  ::proto::Vector3d* temp = featherrelpostoattachfeather_;
  featherrelpostoattachfeather_ = NULL;
  return temp;
}

// required float wingFlapMotorMaxImpulse = 11;
inline bool BigBirdConstructionData::has_wingflapmotormaximpulse() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BigBirdConstructionData::set_has_wingflapmotormaximpulse() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BigBirdConstructionData::clear_has_wingflapmotormaximpulse() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BigBirdConstructionData::clear_wingflapmotormaximpulse() {
  wingflapmotormaximpulse_ = 0;
  clear_has_wingflapmotormaximpulse();
}
inline float BigBirdConstructionData::wingflapmotormaximpulse() const {
  return wingflapmotormaximpulse_;
}
inline void BigBirdConstructionData::set_wingflapmotormaximpulse(float value) {
  set_has_wingflapmotormaximpulse();
  wingflapmotormaximpulse_ = value;
}

// required float wingFlapHingeLimit = 12;
inline bool BigBirdConstructionData::has_wingflaphingelimit() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BigBirdConstructionData::set_has_wingflaphingelimit() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BigBirdConstructionData::clear_has_wingflaphingelimit() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BigBirdConstructionData::clear_wingflaphingelimit() {
  wingflaphingelimit_ = 0;
  clear_has_wingflaphingelimit();
}
inline float BigBirdConstructionData::wingflaphingelimit() const {
  return wingflaphingelimit_;
}
inline void BigBirdConstructionData::set_wingflaphingelimit(float value) {
  set_has_wingflaphingelimit();
  wingflaphingelimit_ = value;
}

// required float featherAoAMotorMaxImpulse = 13;
inline bool BigBirdConstructionData::has_featheraoamotormaximpulse() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BigBirdConstructionData::set_has_featheraoamotormaximpulse() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BigBirdConstructionData::clear_has_featheraoamotormaximpulse() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BigBirdConstructionData::clear_featheraoamotormaximpulse() {
  featheraoamotormaximpulse_ = 0;
  clear_has_featheraoamotormaximpulse();
}
inline float BigBirdConstructionData::featheraoamotormaximpulse() const {
  return featheraoamotormaximpulse_;
}
inline void BigBirdConstructionData::set_featheraoamotormaximpulse(float value) {
  set_has_featheraoamotormaximpulse();
  featheraoamotormaximpulse_ = value;
}

// required float featherAoAHingeLimit = 14;
inline bool BigBirdConstructionData::has_featheraoahingelimit() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BigBirdConstructionData::set_has_featheraoahingelimit() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BigBirdConstructionData::clear_has_featheraoahingelimit() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BigBirdConstructionData::clear_featheraoahingelimit() {
  featheraoahingelimit_ = 0;
  clear_has_featheraoahingelimit();
}
inline float BigBirdConstructionData::featheraoahingelimit() const {
  return featheraoahingelimit_;
}
inline void BigBirdConstructionData::set_featheraoahingelimit(float value) {
  set_has_featheraoahingelimit();
  featheraoahingelimit_ = value;
}

// required int32 randSeed = 15;
inline bool BigBirdConstructionData::has_randseed() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BigBirdConstructionData::set_has_randseed() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BigBirdConstructionData::clear_has_randseed() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BigBirdConstructionData::clear_randseed() {
  randseed_ = 0;
  clear_has_randseed();
}
inline ::google::protobuf::int32 BigBirdConstructionData::randseed() const {
  return randseed_;
}
inline void BigBirdConstructionData::set_randseed(::google::protobuf::int32 value) {
  set_has_randseed();
  randseed_ = value;
}

// required .proto.WingbeatData wingbeatData = 16;
inline bool BigBirdConstructionData::has_wingbeatdata() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BigBirdConstructionData::set_has_wingbeatdata() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BigBirdConstructionData::clear_has_wingbeatdata() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BigBirdConstructionData::clear_wingbeatdata() {
  if (wingbeatdata_ != NULL) wingbeatdata_->::proto::WingbeatData::Clear();
  clear_has_wingbeatdata();
}
inline const ::proto::WingbeatData& BigBirdConstructionData::wingbeatdata() const {
  return wingbeatdata_ != NULL ? *wingbeatdata_ : *default_instance_->wingbeatdata_;
}
inline ::proto::WingbeatData* BigBirdConstructionData::mutable_wingbeatdata() {
  set_has_wingbeatdata();
  if (wingbeatdata_ == NULL) wingbeatdata_ = new ::proto::WingbeatData;
  return wingbeatdata_;
}
inline ::proto::WingbeatData* BigBirdConstructionData::release_wingbeatdata() {
  clear_has_wingbeatdata();
  ::proto::WingbeatData* temp = wingbeatdata_;
  wingbeatdata_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// BirdOptimizerResult

// required .proto.BigBirdConstructionData bird = 1;
inline bool BirdOptimizerResult::has_bird() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BirdOptimizerResult::set_has_bird() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BirdOptimizerResult::clear_has_bird() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BirdOptimizerResult::clear_bird() {
  if (bird_ != NULL) bird_->::proto::BigBirdConstructionData::Clear();
  clear_has_bird();
}
inline const ::proto::BigBirdConstructionData& BirdOptimizerResult::bird() const {
  return bird_ != NULL ? *bird_ : *default_instance_->bird_;
}
inline ::proto::BigBirdConstructionData* BirdOptimizerResult::mutable_bird() {
  set_has_bird();
  if (bird_ == NULL) bird_ = new ::proto::BigBirdConstructionData;
  return bird_;
}
inline ::proto::BigBirdConstructionData* BirdOptimizerResult::release_bird() {
  clear_has_bird();
  ::proto::BigBirdConstructionData* temp = bird_;
  bird_ = NULL;
  return temp;
}

// required float cum_energy = 2;
inline bool BirdOptimizerResult::has_cum_energy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BirdOptimizerResult::set_has_cum_energy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BirdOptimizerResult::clear_has_cum_energy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BirdOptimizerResult::clear_cum_energy() {
  cum_energy_ = 0;
  clear_has_cum_energy();
}
inline float BirdOptimizerResult::cum_energy() const {
  return cum_energy_;
}
inline void BirdOptimizerResult::set_cum_energy(float value) {
  set_has_cum_energy();
  cum_energy_ = value;
}

// -------------------------------------------------------------------

// BirdOptimizerData

// repeated .proto.BirdOptimizerResult result = 1;
inline int BirdOptimizerData::result_size() const {
  return result_.size();
}
inline void BirdOptimizerData::clear_result() {
  result_.Clear();
}
inline const ::proto::BirdOptimizerResult& BirdOptimizerData::result(int index) const {
  return result_.Get(index);
}
inline ::proto::BirdOptimizerResult* BirdOptimizerData::mutable_result(int index) {
  return result_.Mutable(index);
}
inline ::proto::BirdOptimizerResult* BirdOptimizerData::add_result() {
  return result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::BirdOptimizerResult >&
BirdOptimizerData::result() const {
  return result_;
}
inline ::google::protobuf::RepeatedPtrField< ::proto::BirdOptimizerResult >*
BirdOptimizerData::mutable_result() {
  return &result_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2eproto__INCLUDED
