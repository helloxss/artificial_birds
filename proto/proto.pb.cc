// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* Vector3d_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector3d_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingbeatSample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingbeatSample_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingbeatData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingbeatData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectorySample_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectorySample_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrajectoryData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrajectoryData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BigBirdConstructionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BigBirdConstructionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BirdOptimizerResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BirdOptimizerResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BirdOptimizerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BirdOptimizerData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2eproto() {
  protobuf_AddDesc_proto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto.proto");
  GOOGLE_CHECK(file != NULL);
  Vector3d_descriptor_ = file->message_type(0);
  static const int Vector3d_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, z_),
  };
  Vector3d_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Vector3d_descriptor_,
      Vector3d::default_instance_,
      Vector3d_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector3d, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Vector3d));
  WingbeatSample_descriptor_ = file->message_type(1);
  static const int WingbeatSample_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatSample, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatSample, feather_),
  };
  WingbeatSample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingbeatSample_descriptor_,
      WingbeatSample::default_instance_,
      WingbeatSample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatSample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatSample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingbeatSample));
  WingbeatData_descriptor_ = file->message_type(2);
  static const int WingbeatData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatData, sample_),
  };
  WingbeatData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingbeatData_descriptor_,
      WingbeatData::default_instance_,
      WingbeatData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingbeatData));
  TrajectorySample_descriptor_ = file->message_type(3);
  static const int TrajectorySample_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, pelvisposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, leftwingimpulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, rightwingimpulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, leftfeatherimpulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, rightfeatherimpulse_),
  };
  TrajectorySample_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectorySample_descriptor_,
      TrajectorySample::default_instance_,
      TrajectorySample_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectorySample, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectorySample));
  TrajectoryData_descriptor_ = file->message_type(4);
  static const int TrajectoryData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, sample_),
  };
  TrajectoryData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrajectoryData_descriptor_,
      TrajectoryData::default_instance_,
      TrajectoryData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrajectoryData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrajectoryData));
  BigBirdConstructionData_descriptor_ = file->message_type(5);
  static const int BigBirdConstructionData_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, pelvishalflength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, winghalflength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, hoistanglexy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, hoistanglezxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, hoistmass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, pelvismass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, wingmass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, featherarea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, pelvisrelpostoattachwing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, featherrelpostoattachfeather_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, wingflapmotormaximpulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, wingflaphingelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, featheraoamotormaximpulse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, featheraoahingelimit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, randseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, wingbeatdata_),
  };
  BigBirdConstructionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BigBirdConstructionData_descriptor_,
      BigBirdConstructionData::default_instance_,
      BigBirdConstructionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BigBirdConstructionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BigBirdConstructionData));
  BirdOptimizerResult_descriptor_ = file->message_type(6);
  static const int BirdOptimizerResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerResult, bird_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerResult, cum_energy_),
  };
  BirdOptimizerResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BirdOptimizerResult_descriptor_,
      BirdOptimizerResult::default_instance_,
      BirdOptimizerResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BirdOptimizerResult));
  BirdOptimizerData_descriptor_ = file->message_type(7);
  static const int BirdOptimizerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerData, result_),
  };
  BirdOptimizerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BirdOptimizerData_descriptor_,
      BirdOptimizerData::default_instance_,
      BirdOptimizerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BirdOptimizerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BirdOptimizerData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Vector3d_descriptor_, &Vector3d::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingbeatSample_descriptor_, &WingbeatSample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingbeatData_descriptor_, &WingbeatData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectorySample_descriptor_, &TrajectorySample::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrajectoryData_descriptor_, &TrajectoryData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BigBirdConstructionData_descriptor_, &BigBirdConstructionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BirdOptimizerResult_descriptor_, &BirdOptimizerResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BirdOptimizerData_descriptor_, &BirdOptimizerData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2eproto() {
  delete Vector3d::default_instance_;
  delete Vector3d_reflection_;
  delete WingbeatSample::default_instance_;
  delete WingbeatSample_reflection_;
  delete WingbeatData::default_instance_;
  delete WingbeatData_reflection_;
  delete TrajectorySample::default_instance_;
  delete TrajectorySample_reflection_;
  delete TrajectoryData::default_instance_;
  delete TrajectoryData_reflection_;
  delete BigBirdConstructionData::default_instance_;
  delete BigBirdConstructionData_reflection_;
  delete BirdOptimizerResult::default_instance_;
  delete BirdOptimizerResult_reflection_;
  delete BirdOptimizerData::default_instance_;
  delete BirdOptimizerData_reflection_;
}

void protobuf_AddDesc_proto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013proto.proto\022\005proto\"+\n\010Vector3d\022\t\n\001x\030\001 "
    "\002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"/\n\016WingbeatSam"
    "ple\022\014\n\004wing\030\001 \002(\002\022\017\n\007feather\030\002 \002(\002\"5\n\014Wi"
    "ngbeatData\022%\n\006sample\030\001 \003(\0132\025.proto.Wingb"
    "eatSample\"\247\001\n\020TrajectorySample\022\'\n\016pelvis"
    "Position\030\001 \002(\0132\017.proto.Vector3d\022\027\n\017leftW"
    "ingImpulse\030\002 \002(\002\022\030\n\020rightWingImpulse\030\003 \002"
    "(\002\022\032\n\022leftFeatherImpulse\030\004 \002(\002\022\033\n\023rightF"
    "eatherImpulse\030\005 \002(\002\"9\n\016TrajectoryData\022\'\n"
    "\006sample\030\001 \003(\0132\027.proto.TrajectorySample\"\353"
    "\003\n\027BigBirdConstructionData\022\030\n\020pelvisHalf"
    "Length\030\001 \002(\002\022\026\n\016wingHalfLength\030\002 \002(\002\022\024\n\014"
    "hoistAngleXY\030\003 \002(\002\022\025\n\rhoistAngleZXY\030\004 \002("
    "\002\022\021\n\thoistMass\030\005 \002(\002\022\022\n\npelvisMass\030\006 \002(\002"
    "\022\020\n\010wingMass\030\007 \002(\002\022\023\n\013featherArea\030\010 \001(\002\022"
    "1\n\030pelvisRelPosToAttachWing\030\t \002(\0132\017.prot"
    "o.Vector3d\0225\n\034featherRelPosToAttachFeath"
    "er\030\n \002(\0132\017.proto.Vector3d\022\037\n\027wingFlapMot"
    "orMaxImpulse\030\013 \002(\002\022\032\n\022wingFlapHingeLimit"
    "\030\014 \002(\002\022!\n\031featherAoAMotorMaxImpulse\030\r \002("
    "\002\022\034\n\024featherAoAHingeLimit\030\016 \002(\002\022\020\n\010randS"
    "eed\030\017 \002(\005\022)\n\014wingbeatData\030\020 \002(\0132\023.proto."
    "WingbeatData\"W\n\023BirdOptimizerResult\022,\n\004b"
    "ird\030\001 \002(\0132\036.proto.BigBirdConstructionDat"
    "a\022\022\n\ncum_energy\030\002 \002(\002\"\?\n\021BirdOptimizerDa"
    "ta\022*\n\006result\030\001 \003(\0132\032.proto.BirdOptimizer"
    "Result", 1046);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto.proto", &protobuf_RegisterTypes);
  Vector3d::default_instance_ = new Vector3d();
  WingbeatSample::default_instance_ = new WingbeatSample();
  WingbeatData::default_instance_ = new WingbeatData();
  TrajectorySample::default_instance_ = new TrajectorySample();
  TrajectoryData::default_instance_ = new TrajectoryData();
  BigBirdConstructionData::default_instance_ = new BigBirdConstructionData();
  BirdOptimizerResult::default_instance_ = new BirdOptimizerResult();
  BirdOptimizerData::default_instance_ = new BirdOptimizerData();
  Vector3d::default_instance_->InitAsDefaultInstance();
  WingbeatSample::default_instance_->InitAsDefaultInstance();
  WingbeatData::default_instance_->InitAsDefaultInstance();
  TrajectorySample::default_instance_->InitAsDefaultInstance();
  TrajectoryData::default_instance_->InitAsDefaultInstance();
  BigBirdConstructionData::default_instance_->InitAsDefaultInstance();
  BirdOptimizerResult::default_instance_->InitAsDefaultInstance();
  BirdOptimizerData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2eproto {
  StaticDescriptorInitializer_proto_2eproto() {
    protobuf_AddDesc_proto_2eproto();
  }
} static_descriptor_initializer_proto_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int Vector3d::kXFieldNumber;
const int Vector3d::kYFieldNumber;
const int Vector3d::kZFieldNumber;
#endif  // !_MSC_VER

Vector3d::Vector3d()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Vector3d::InitAsDefaultInstance() {
}

Vector3d::Vector3d(const Vector3d& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Vector3d::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector3d::~Vector3d() {
  SharedDtor();
}

void Vector3d::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector3d::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector3d::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector3d_descriptor_;
}

const Vector3d& Vector3d::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

Vector3d* Vector3d::default_instance_ = NULL;

Vector3d* Vector3d::New() const {
  return new Vector3d;
}

void Vector3d::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Vector3d::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Vector3d::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Vector3d::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Vector3d::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector3d::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Vector3d* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Vector3d*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector3d::MergeFrom(const Vector3d& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Vector3d::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3d::CopyFrom(const Vector3d& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3d::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void Vector3d::Swap(Vector3d* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Vector3d::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector3d_descriptor_;
  metadata.reflection = Vector3d_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingbeatSample::kWingFieldNumber;
const int WingbeatSample::kFeatherFieldNumber;
#endif  // !_MSC_VER

WingbeatSample::WingbeatSample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingbeatSample::InitAsDefaultInstance() {
}

WingbeatSample::WingbeatSample(const WingbeatSample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingbeatSample::SharedCtor() {
  _cached_size_ = 0;
  wing_ = 0;
  feather_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingbeatSample::~WingbeatSample() {
  SharedDtor();
}

void WingbeatSample::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingbeatSample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingbeatSample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingbeatSample_descriptor_;
}

const WingbeatSample& WingbeatSample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

WingbeatSample* WingbeatSample::default_instance_ = NULL;

WingbeatSample* WingbeatSample::New() const {
  return new WingbeatSample;
}

void WingbeatSample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wing_ = 0;
    feather_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingbeatSample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float wing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_feather;
        break;
      }
      
      // required float feather = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feather_)));
          set_has_feather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingbeatSample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float wing = 1;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->wing(), output);
  }
  
  // required float feather = 2;
  if (has_feather()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->feather(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingbeatSample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float wing = 1;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->wing(), target);
  }
  
  // required float feather = 2;
  if (has_feather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->feather(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingbeatSample::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float wing = 1;
    if (has_wing()) {
      total_size += 1 + 4;
    }
    
    // required float feather = 2;
    if (has_feather()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingbeatSample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingbeatSample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingbeatSample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingbeatSample::MergeFrom(const WingbeatSample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wing()) {
      set_wing(from.wing());
    }
    if (from.has_feather()) {
      set_feather(from.feather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingbeatSample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingbeatSample::CopyFrom(const WingbeatSample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingbeatSample::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void WingbeatSample::Swap(WingbeatSample* other) {
  if (other != this) {
    std::swap(wing_, other->wing_);
    std::swap(feather_, other->feather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingbeatSample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingbeatSample_descriptor_;
  metadata.reflection = WingbeatSample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingbeatData::kSampleFieldNumber;
#endif  // !_MSC_VER

WingbeatData::WingbeatData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingbeatData::InitAsDefaultInstance() {
}

WingbeatData::WingbeatData(const WingbeatData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingbeatData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingbeatData::~WingbeatData() {
  SharedDtor();
}

void WingbeatData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingbeatData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingbeatData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingbeatData_descriptor_;
}

const WingbeatData& WingbeatData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

WingbeatData* WingbeatData::default_instance_ = NULL;

WingbeatData* WingbeatData::New() const {
  return new WingbeatData;
}

void WingbeatData::Clear() {
  sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingbeatData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.WingbeatSample sample = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sample;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingbeatData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.WingbeatSample sample = 1;
  for (int i = 0; i < this->sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingbeatData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.WingbeatSample sample = 1;
  for (int i = 0; i < this->sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sample(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingbeatData::ByteSize() const {
  int total_size = 0;
  
  // repeated .proto.WingbeatSample sample = 1;
  total_size += 1 * this->sample_size();
  for (int i = 0; i < this->sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sample(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingbeatData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingbeatData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingbeatData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingbeatData::MergeFrom(const WingbeatData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_.MergeFrom(from.sample_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingbeatData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingbeatData::CopyFrom(const WingbeatData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingbeatData::IsInitialized() const {
  
  for (int i = 0; i < sample_size(); i++) {
    if (!this->sample(i).IsInitialized()) return false;
  }
  return true;
}

void WingbeatData::Swap(WingbeatData* other) {
  if (other != this) {
    sample_.Swap(&other->sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingbeatData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingbeatData_descriptor_;
  metadata.reflection = WingbeatData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectorySample::kPelvisPositionFieldNumber;
const int TrajectorySample::kLeftWingImpulseFieldNumber;
const int TrajectorySample::kRightWingImpulseFieldNumber;
const int TrajectorySample::kLeftFeatherImpulseFieldNumber;
const int TrajectorySample::kRightFeatherImpulseFieldNumber;
#endif  // !_MSC_VER

TrajectorySample::TrajectorySample()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectorySample::InitAsDefaultInstance() {
  pelvisposition_ = const_cast< ::proto::Vector3d*>(&::proto::Vector3d::default_instance());
}

TrajectorySample::TrajectorySample(const TrajectorySample& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectorySample::SharedCtor() {
  _cached_size_ = 0;
  pelvisposition_ = NULL;
  leftwingimpulse_ = 0;
  rightwingimpulse_ = 0;
  leftfeatherimpulse_ = 0;
  rightfeatherimpulse_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectorySample::~TrajectorySample() {
  SharedDtor();
}

void TrajectorySample::SharedDtor() {
  if (this != default_instance_) {
    delete pelvisposition_;
  }
}

void TrajectorySample::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectorySample::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectorySample_descriptor_;
}

const TrajectorySample& TrajectorySample::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

TrajectorySample* TrajectorySample::default_instance_ = NULL;

TrajectorySample* TrajectorySample::New() const {
  return new TrajectorySample;
}

void TrajectorySample::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_pelvisposition()) {
      if (pelvisposition_ != NULL) pelvisposition_->::proto::Vector3d::Clear();
    }
    leftwingimpulse_ = 0;
    rightwingimpulse_ = 0;
    leftfeatherimpulse_ = 0;
    rightfeatherimpulse_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectorySample::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.Vector3d pelvisPosition = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pelvisposition()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_leftWingImpulse;
        break;
      }
      
      // required float leftWingImpulse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftWingImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftwingimpulse_)));
          set_has_leftwingimpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_rightWingImpulse;
        break;
      }
      
      // required float rightWingImpulse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightWingImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightwingimpulse_)));
          set_has_rightwingimpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_leftFeatherImpulse;
        break;
      }
      
      // required float leftFeatherImpulse = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_leftFeatherImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftfeatherimpulse_)));
          set_has_leftfeatherimpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_rightFeatherImpulse;
        break;
      }
      
      // required float rightFeatherImpulse = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_rightFeatherImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightfeatherimpulse_)));
          set_has_rightfeatherimpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectorySample::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.Vector3d pelvisPosition = 1;
  if (has_pelvisposition()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pelvisposition(), output);
  }
  
  // required float leftWingImpulse = 2;
  if (has_leftwingimpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->leftwingimpulse(), output);
  }
  
  // required float rightWingImpulse = 3;
  if (has_rightwingimpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->rightwingimpulse(), output);
  }
  
  // required float leftFeatherImpulse = 4;
  if (has_leftfeatherimpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->leftfeatherimpulse(), output);
  }
  
  // required float rightFeatherImpulse = 5;
  if (has_rightfeatherimpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rightfeatherimpulse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectorySample::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.Vector3d pelvisPosition = 1;
  if (has_pelvisposition()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pelvisposition(), target);
  }
  
  // required float leftWingImpulse = 2;
  if (has_leftwingimpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->leftwingimpulse(), target);
  }
  
  // required float rightWingImpulse = 3;
  if (has_rightwingimpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->rightwingimpulse(), target);
  }
  
  // required float leftFeatherImpulse = 4;
  if (has_leftfeatherimpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->leftfeatherimpulse(), target);
  }
  
  // required float rightFeatherImpulse = 5;
  if (has_rightfeatherimpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rightfeatherimpulse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectorySample::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.Vector3d pelvisPosition = 1;
    if (has_pelvisposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pelvisposition());
    }
    
    // required float leftWingImpulse = 2;
    if (has_leftwingimpulse()) {
      total_size += 1 + 4;
    }
    
    // required float rightWingImpulse = 3;
    if (has_rightwingimpulse()) {
      total_size += 1 + 4;
    }
    
    // required float leftFeatherImpulse = 4;
    if (has_leftfeatherimpulse()) {
      total_size += 1 + 4;
    }
    
    // required float rightFeatherImpulse = 5;
    if (has_rightfeatherimpulse()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectorySample::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectorySample* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectorySample*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectorySample::MergeFrom(const TrajectorySample& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pelvisposition()) {
      mutable_pelvisposition()->::proto::Vector3d::MergeFrom(from.pelvisposition());
    }
    if (from.has_leftwingimpulse()) {
      set_leftwingimpulse(from.leftwingimpulse());
    }
    if (from.has_rightwingimpulse()) {
      set_rightwingimpulse(from.rightwingimpulse());
    }
    if (from.has_leftfeatherimpulse()) {
      set_leftfeatherimpulse(from.leftfeatherimpulse());
    }
    if (from.has_rightfeatherimpulse()) {
      set_rightfeatherimpulse(from.rightfeatherimpulse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectorySample::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectorySample::CopyFrom(const TrajectorySample& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectorySample::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_pelvisposition()) {
    if (!this->pelvisposition().IsInitialized()) return false;
  }
  return true;
}

void TrajectorySample::Swap(TrajectorySample* other) {
  if (other != this) {
    std::swap(pelvisposition_, other->pelvisposition_);
    std::swap(leftwingimpulse_, other->leftwingimpulse_);
    std::swap(rightwingimpulse_, other->rightwingimpulse_);
    std::swap(leftfeatherimpulse_, other->leftfeatherimpulse_);
    std::swap(rightfeatherimpulse_, other->rightfeatherimpulse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectorySample::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectorySample_descriptor_;
  metadata.reflection = TrajectorySample_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrajectoryData::kSampleFieldNumber;
#endif  // !_MSC_VER

TrajectoryData::TrajectoryData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TrajectoryData::InitAsDefaultInstance() {
}

TrajectoryData::TrajectoryData(const TrajectoryData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TrajectoryData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrajectoryData::~TrajectoryData() {
  SharedDtor();
}

void TrajectoryData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TrajectoryData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrajectoryData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrajectoryData_descriptor_;
}

const TrajectoryData& TrajectoryData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

TrajectoryData* TrajectoryData::default_instance_ = NULL;

TrajectoryData* TrajectoryData::New() const {
  return new TrajectoryData;
}

void TrajectoryData::Clear() {
  sample_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrajectoryData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.TrajectorySample sample = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sample:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sample()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sample;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TrajectoryData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.TrajectorySample sample = 1;
  for (int i = 0; i < this->sample_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sample(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TrajectoryData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.TrajectorySample sample = 1;
  for (int i = 0; i < this->sample_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sample(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TrajectoryData::ByteSize() const {
  int total_size = 0;
  
  // repeated .proto.TrajectorySample sample = 1;
  total_size += 1 * this->sample_size();
  for (int i = 0; i < this->sample_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sample(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrajectoryData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrajectoryData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrajectoryData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrajectoryData::MergeFrom(const TrajectoryData& from) {
  GOOGLE_CHECK_NE(&from, this);
  sample_.MergeFrom(from.sample_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrajectoryData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrajectoryData::CopyFrom(const TrajectoryData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrajectoryData::IsInitialized() const {
  
  for (int i = 0; i < sample_size(); i++) {
    if (!this->sample(i).IsInitialized()) return false;
  }
  return true;
}

void TrajectoryData::Swap(TrajectoryData* other) {
  if (other != this) {
    sample_.Swap(&other->sample_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrajectoryData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrajectoryData_descriptor_;
  metadata.reflection = TrajectoryData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BigBirdConstructionData::kPelvisHalfLengthFieldNumber;
const int BigBirdConstructionData::kWingHalfLengthFieldNumber;
const int BigBirdConstructionData::kHoistAngleXYFieldNumber;
const int BigBirdConstructionData::kHoistAngleZXYFieldNumber;
const int BigBirdConstructionData::kHoistMassFieldNumber;
const int BigBirdConstructionData::kPelvisMassFieldNumber;
const int BigBirdConstructionData::kWingMassFieldNumber;
const int BigBirdConstructionData::kFeatherAreaFieldNumber;
const int BigBirdConstructionData::kPelvisRelPosToAttachWingFieldNumber;
const int BigBirdConstructionData::kFeatherRelPosToAttachFeatherFieldNumber;
const int BigBirdConstructionData::kWingFlapMotorMaxImpulseFieldNumber;
const int BigBirdConstructionData::kWingFlapHingeLimitFieldNumber;
const int BigBirdConstructionData::kFeatherAoAMotorMaxImpulseFieldNumber;
const int BigBirdConstructionData::kFeatherAoAHingeLimitFieldNumber;
const int BigBirdConstructionData::kRandSeedFieldNumber;
const int BigBirdConstructionData::kWingbeatDataFieldNumber;
#endif  // !_MSC_VER

BigBirdConstructionData::BigBirdConstructionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BigBirdConstructionData::InitAsDefaultInstance() {
  pelvisrelpostoattachwing_ = const_cast< ::proto::Vector3d*>(&::proto::Vector3d::default_instance());
  featherrelpostoattachfeather_ = const_cast< ::proto::Vector3d*>(&::proto::Vector3d::default_instance());
  wingbeatdata_ = const_cast< ::proto::WingbeatData*>(&::proto::WingbeatData::default_instance());
}

BigBirdConstructionData::BigBirdConstructionData(const BigBirdConstructionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BigBirdConstructionData::SharedCtor() {
  _cached_size_ = 0;
  pelvishalflength_ = 0;
  winghalflength_ = 0;
  hoistanglexy_ = 0;
  hoistanglezxy_ = 0;
  hoistmass_ = 0;
  pelvismass_ = 0;
  wingmass_ = 0;
  featherarea_ = 0;
  pelvisrelpostoattachwing_ = NULL;
  featherrelpostoattachfeather_ = NULL;
  wingflapmotormaximpulse_ = 0;
  wingflaphingelimit_ = 0;
  featheraoamotormaximpulse_ = 0;
  featheraoahingelimit_ = 0;
  randseed_ = 0;
  wingbeatdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BigBirdConstructionData::~BigBirdConstructionData() {
  SharedDtor();
}

void BigBirdConstructionData::SharedDtor() {
  if (this != default_instance_) {
    delete pelvisrelpostoattachwing_;
    delete featherrelpostoattachfeather_;
    delete wingbeatdata_;
  }
}

void BigBirdConstructionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BigBirdConstructionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BigBirdConstructionData_descriptor_;
}

const BigBirdConstructionData& BigBirdConstructionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

BigBirdConstructionData* BigBirdConstructionData::default_instance_ = NULL;

BigBirdConstructionData* BigBirdConstructionData::New() const {
  return new BigBirdConstructionData;
}

void BigBirdConstructionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pelvishalflength_ = 0;
    winghalflength_ = 0;
    hoistanglexy_ = 0;
    hoistanglezxy_ = 0;
    hoistmass_ = 0;
    pelvismass_ = 0;
    wingmass_ = 0;
    featherarea_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_pelvisrelpostoattachwing()) {
      if (pelvisrelpostoattachwing_ != NULL) pelvisrelpostoattachwing_->::proto::Vector3d::Clear();
    }
    if (has_featherrelpostoattachfeather()) {
      if (featherrelpostoattachfeather_ != NULL) featherrelpostoattachfeather_->::proto::Vector3d::Clear();
    }
    wingflapmotormaximpulse_ = 0;
    wingflaphingelimit_ = 0;
    featheraoamotormaximpulse_ = 0;
    featheraoahingelimit_ = 0;
    randseed_ = 0;
    if (has_wingbeatdata()) {
      if (wingbeatdata_ != NULL) wingbeatdata_->::proto::WingbeatData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BigBirdConstructionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float pelvisHalfLength = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pelvishalflength_)));
          set_has_pelvishalflength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_wingHalfLength;
        break;
      }
      
      // required float wingHalfLength = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wingHalfLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &winghalflength_)));
          set_has_winghalflength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_hoistAngleXY;
        break;
      }
      
      // required float hoistAngleXY = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hoistAngleXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hoistanglexy_)));
          set_has_hoistanglexy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_hoistAngleZXY;
        break;
      }
      
      // required float hoistAngleZXY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hoistAngleZXY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hoistanglezxy_)));
          set_has_hoistanglezxy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_hoistMass;
        break;
      }
      
      // required float hoistMass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_hoistMass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hoistmass_)));
          set_has_hoistmass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(53)) goto parse_pelvisMass;
        break;
      }
      
      // required float pelvisMass = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_pelvisMass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pelvismass_)));
          set_has_pelvismass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_wingMass;
        break;
      }
      
      // required float wingMass = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wingMass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wingmass_)));
          set_has_wingmass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(69)) goto parse_featherArea;
        break;
      }
      
      // optional float featherArea = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_featherArea:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &featherarea_)));
          set_has_featherarea();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_pelvisRelPosToAttachWing;
        break;
      }
      
      // required .proto.Vector3d pelvisRelPosToAttachWing = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pelvisRelPosToAttachWing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pelvisrelpostoattachwing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_featherRelPosToAttachFeather;
        break;
      }
      
      // required .proto.Vector3d featherRelPosToAttachFeather = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_featherRelPosToAttachFeather:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_featherrelpostoattachfeather()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(93)) goto parse_wingFlapMotorMaxImpulse;
        break;
      }
      
      // required float wingFlapMotorMaxImpulse = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wingFlapMotorMaxImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wingflapmotormaximpulse_)));
          set_has_wingflapmotormaximpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(101)) goto parse_wingFlapHingeLimit;
        break;
      }
      
      // required float wingFlapHingeLimit = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_wingFlapHingeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wingflaphingelimit_)));
          set_has_wingflaphingelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(109)) goto parse_featherAoAMotorMaxImpulse;
        break;
      }
      
      // required float featherAoAMotorMaxImpulse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_featherAoAMotorMaxImpulse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &featheraoamotormaximpulse_)));
          set_has_featheraoamotormaximpulse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(117)) goto parse_featherAoAHingeLimit;
        break;
      }
      
      // required float featherAoAHingeLimit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_featherAoAHingeLimit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &featheraoahingelimit_)));
          set_has_featheraoahingelimit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_randSeed;
        break;
      }
      
      // required int32 randSeed = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randseed_)));
          set_has_randseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_wingbeatData;
        break;
      }
      
      // required .proto.WingbeatData wingbeatData = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wingbeatData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wingbeatdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BigBirdConstructionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float pelvisHalfLength = 1;
  if (has_pelvishalflength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->pelvishalflength(), output);
  }
  
  // required float wingHalfLength = 2;
  if (has_winghalflength()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->winghalflength(), output);
  }
  
  // required float hoistAngleXY = 3;
  if (has_hoistanglexy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->hoistanglexy(), output);
  }
  
  // required float hoistAngleZXY = 4;
  if (has_hoistanglezxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->hoistanglezxy(), output);
  }
  
  // required float hoistMass = 5;
  if (has_hoistmass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->hoistmass(), output);
  }
  
  // required float pelvisMass = 6;
  if (has_pelvismass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->pelvismass(), output);
  }
  
  // required float wingMass = 7;
  if (has_wingmass()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->wingmass(), output);
  }
  
  // optional float featherArea = 8;
  if (has_featherarea()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->featherarea(), output);
  }
  
  // required .proto.Vector3d pelvisRelPosToAttachWing = 9;
  if (has_pelvisrelpostoattachwing()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->pelvisrelpostoattachwing(), output);
  }
  
  // required .proto.Vector3d featherRelPosToAttachFeather = 10;
  if (has_featherrelpostoattachfeather()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->featherrelpostoattachfeather(), output);
  }
  
  // required float wingFlapMotorMaxImpulse = 11;
  if (has_wingflapmotormaximpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->wingflapmotormaximpulse(), output);
  }
  
  // required float wingFlapHingeLimit = 12;
  if (has_wingflaphingelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->wingflaphingelimit(), output);
  }
  
  // required float featherAoAMotorMaxImpulse = 13;
  if (has_featheraoamotormaximpulse()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->featheraoamotormaximpulse(), output);
  }
  
  // required float featherAoAHingeLimit = 14;
  if (has_featheraoahingelimit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->featheraoahingelimit(), output);
  }
  
  // required int32 randSeed = 15;
  if (has_randseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->randseed(), output);
  }
  
  // required .proto.WingbeatData wingbeatData = 16;
  if (has_wingbeatdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->wingbeatdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BigBirdConstructionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float pelvisHalfLength = 1;
  if (has_pelvishalflength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->pelvishalflength(), target);
  }
  
  // required float wingHalfLength = 2;
  if (has_winghalflength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->winghalflength(), target);
  }
  
  // required float hoistAngleXY = 3;
  if (has_hoistanglexy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->hoistanglexy(), target);
  }
  
  // required float hoistAngleZXY = 4;
  if (has_hoistanglezxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->hoistanglezxy(), target);
  }
  
  // required float hoistMass = 5;
  if (has_hoistmass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->hoistmass(), target);
  }
  
  // required float pelvisMass = 6;
  if (has_pelvismass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->pelvismass(), target);
  }
  
  // required float wingMass = 7;
  if (has_wingmass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->wingmass(), target);
  }
  
  // optional float featherArea = 8;
  if (has_featherarea()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(8, this->featherarea(), target);
  }
  
  // required .proto.Vector3d pelvisRelPosToAttachWing = 9;
  if (has_pelvisrelpostoattachwing()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->pelvisrelpostoattachwing(), target);
  }
  
  // required .proto.Vector3d featherRelPosToAttachFeather = 10;
  if (has_featherrelpostoattachfeather()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->featherrelpostoattachfeather(), target);
  }
  
  // required float wingFlapMotorMaxImpulse = 11;
  if (has_wingflapmotormaximpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(11, this->wingflapmotormaximpulse(), target);
  }
  
  // required float wingFlapHingeLimit = 12;
  if (has_wingflaphingelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(12, this->wingflaphingelimit(), target);
  }
  
  // required float featherAoAMotorMaxImpulse = 13;
  if (has_featheraoamotormaximpulse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(13, this->featheraoamotormaximpulse(), target);
  }
  
  // required float featherAoAHingeLimit = 14;
  if (has_featheraoahingelimit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->featheraoahingelimit(), target);
  }
  
  // required int32 randSeed = 15;
  if (has_randseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->randseed(), target);
  }
  
  // required .proto.WingbeatData wingbeatData = 16;
  if (has_wingbeatdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->wingbeatdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BigBirdConstructionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float pelvisHalfLength = 1;
    if (has_pelvishalflength()) {
      total_size += 1 + 4;
    }
    
    // required float wingHalfLength = 2;
    if (has_winghalflength()) {
      total_size += 1 + 4;
    }
    
    // required float hoistAngleXY = 3;
    if (has_hoistanglexy()) {
      total_size += 1 + 4;
    }
    
    // required float hoistAngleZXY = 4;
    if (has_hoistanglezxy()) {
      total_size += 1 + 4;
    }
    
    // required float hoistMass = 5;
    if (has_hoistmass()) {
      total_size += 1 + 4;
    }
    
    // required float pelvisMass = 6;
    if (has_pelvismass()) {
      total_size += 1 + 4;
    }
    
    // required float wingMass = 7;
    if (has_wingmass()) {
      total_size += 1 + 4;
    }
    
    // optional float featherArea = 8;
    if (has_featherarea()) {
      total_size += 1 + 4;
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .proto.Vector3d pelvisRelPosToAttachWing = 9;
    if (has_pelvisrelpostoattachwing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pelvisrelpostoattachwing());
    }
    
    // required .proto.Vector3d featherRelPosToAttachFeather = 10;
    if (has_featherrelpostoattachfeather()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->featherrelpostoattachfeather());
    }
    
    // required float wingFlapMotorMaxImpulse = 11;
    if (has_wingflapmotormaximpulse()) {
      total_size += 1 + 4;
    }
    
    // required float wingFlapHingeLimit = 12;
    if (has_wingflaphingelimit()) {
      total_size += 1 + 4;
    }
    
    // required float featherAoAMotorMaxImpulse = 13;
    if (has_featheraoamotormaximpulse()) {
      total_size += 1 + 4;
    }
    
    // required float featherAoAHingeLimit = 14;
    if (has_featheraoahingelimit()) {
      total_size += 1 + 4;
    }
    
    // required int32 randSeed = 15;
    if (has_randseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randseed());
    }
    
    // required .proto.WingbeatData wingbeatData = 16;
    if (has_wingbeatdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wingbeatdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BigBirdConstructionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BigBirdConstructionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BigBirdConstructionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BigBirdConstructionData::MergeFrom(const BigBirdConstructionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pelvishalflength()) {
      set_pelvishalflength(from.pelvishalflength());
    }
    if (from.has_winghalflength()) {
      set_winghalflength(from.winghalflength());
    }
    if (from.has_hoistanglexy()) {
      set_hoistanglexy(from.hoistanglexy());
    }
    if (from.has_hoistanglezxy()) {
      set_hoistanglezxy(from.hoistanglezxy());
    }
    if (from.has_hoistmass()) {
      set_hoistmass(from.hoistmass());
    }
    if (from.has_pelvismass()) {
      set_pelvismass(from.pelvismass());
    }
    if (from.has_wingmass()) {
      set_wingmass(from.wingmass());
    }
    if (from.has_featherarea()) {
      set_featherarea(from.featherarea());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pelvisrelpostoattachwing()) {
      mutable_pelvisrelpostoattachwing()->::proto::Vector3d::MergeFrom(from.pelvisrelpostoattachwing());
    }
    if (from.has_featherrelpostoattachfeather()) {
      mutable_featherrelpostoattachfeather()->::proto::Vector3d::MergeFrom(from.featherrelpostoattachfeather());
    }
    if (from.has_wingflapmotormaximpulse()) {
      set_wingflapmotormaximpulse(from.wingflapmotormaximpulse());
    }
    if (from.has_wingflaphingelimit()) {
      set_wingflaphingelimit(from.wingflaphingelimit());
    }
    if (from.has_featheraoamotormaximpulse()) {
      set_featheraoamotormaximpulse(from.featheraoamotormaximpulse());
    }
    if (from.has_featheraoahingelimit()) {
      set_featheraoahingelimit(from.featheraoahingelimit());
    }
    if (from.has_randseed()) {
      set_randseed(from.randseed());
    }
    if (from.has_wingbeatdata()) {
      mutable_wingbeatdata()->::proto::WingbeatData::MergeFrom(from.wingbeatdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BigBirdConstructionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BigBirdConstructionData::CopyFrom(const BigBirdConstructionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BigBirdConstructionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ff7f) != 0x0000ff7f) return false;
  
  if (has_pelvisrelpostoattachwing()) {
    if (!this->pelvisrelpostoattachwing().IsInitialized()) return false;
  }
  if (has_featherrelpostoattachfeather()) {
    if (!this->featherrelpostoattachfeather().IsInitialized()) return false;
  }
  if (has_wingbeatdata()) {
    if (!this->wingbeatdata().IsInitialized()) return false;
  }
  return true;
}

void BigBirdConstructionData::Swap(BigBirdConstructionData* other) {
  if (other != this) {
    std::swap(pelvishalflength_, other->pelvishalflength_);
    std::swap(winghalflength_, other->winghalflength_);
    std::swap(hoistanglexy_, other->hoistanglexy_);
    std::swap(hoistanglezxy_, other->hoistanglezxy_);
    std::swap(hoistmass_, other->hoistmass_);
    std::swap(pelvismass_, other->pelvismass_);
    std::swap(wingmass_, other->wingmass_);
    std::swap(featherarea_, other->featherarea_);
    std::swap(pelvisrelpostoattachwing_, other->pelvisrelpostoattachwing_);
    std::swap(featherrelpostoattachfeather_, other->featherrelpostoattachfeather_);
    std::swap(wingflapmotormaximpulse_, other->wingflapmotormaximpulse_);
    std::swap(wingflaphingelimit_, other->wingflaphingelimit_);
    std::swap(featheraoamotormaximpulse_, other->featheraoamotormaximpulse_);
    std::swap(featheraoahingelimit_, other->featheraoahingelimit_);
    std::swap(randseed_, other->randseed_);
    std::swap(wingbeatdata_, other->wingbeatdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BigBirdConstructionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BigBirdConstructionData_descriptor_;
  metadata.reflection = BigBirdConstructionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BirdOptimizerResult::kBirdFieldNumber;
const int BirdOptimizerResult::kCumEnergyFieldNumber;
#endif  // !_MSC_VER

BirdOptimizerResult::BirdOptimizerResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BirdOptimizerResult::InitAsDefaultInstance() {
  bird_ = const_cast< ::proto::BigBirdConstructionData*>(&::proto::BigBirdConstructionData::default_instance());
}

BirdOptimizerResult::BirdOptimizerResult(const BirdOptimizerResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BirdOptimizerResult::SharedCtor() {
  _cached_size_ = 0;
  bird_ = NULL;
  cum_energy_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BirdOptimizerResult::~BirdOptimizerResult() {
  SharedDtor();
}

void BirdOptimizerResult::SharedDtor() {
  if (this != default_instance_) {
    delete bird_;
  }
}

void BirdOptimizerResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdOptimizerResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BirdOptimizerResult_descriptor_;
}

const BirdOptimizerResult& BirdOptimizerResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

BirdOptimizerResult* BirdOptimizerResult::default_instance_ = NULL;

BirdOptimizerResult* BirdOptimizerResult::New() const {
  return new BirdOptimizerResult;
}

void BirdOptimizerResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bird()) {
      if (bird_ != NULL) bird_->::proto::BigBirdConstructionData::Clear();
    }
    cum_energy_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BirdOptimizerResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .proto.BigBirdConstructionData bird = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bird()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_cum_energy;
        break;
      }
      
      // required float cum_energy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_cum_energy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cum_energy_)));
          set_has_cum_energy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BirdOptimizerResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .proto.BigBirdConstructionData bird = 1;
  if (has_bird()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bird(), output);
  }
  
  // required float cum_energy = 2;
  if (has_cum_energy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->cum_energy(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BirdOptimizerResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .proto.BigBirdConstructionData bird = 1;
  if (has_bird()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bird(), target);
  }
  
  // required float cum_energy = 2;
  if (has_cum_energy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->cum_energy(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BirdOptimizerResult::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .proto.BigBirdConstructionData bird = 1;
    if (has_bird()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bird());
    }
    
    // required float cum_energy = 2;
    if (has_cum_energy()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdOptimizerResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BirdOptimizerResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BirdOptimizerResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BirdOptimizerResult::MergeFrom(const BirdOptimizerResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bird()) {
      mutable_bird()->::proto::BigBirdConstructionData::MergeFrom(from.bird());
    }
    if (from.has_cum_energy()) {
      set_cum_energy(from.cum_energy());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BirdOptimizerResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdOptimizerResult::CopyFrom(const BirdOptimizerResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdOptimizerResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_bird()) {
    if (!this->bird().IsInitialized()) return false;
  }
  return true;
}

void BirdOptimizerResult::Swap(BirdOptimizerResult* other) {
  if (other != this) {
    std::swap(bird_, other->bird_);
    std::swap(cum_energy_, other->cum_energy_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BirdOptimizerResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BirdOptimizerResult_descriptor_;
  metadata.reflection = BirdOptimizerResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BirdOptimizerData::kResultFieldNumber;
#endif  // !_MSC_VER

BirdOptimizerData::BirdOptimizerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BirdOptimizerData::InitAsDefaultInstance() {
}

BirdOptimizerData::BirdOptimizerData(const BirdOptimizerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BirdOptimizerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BirdOptimizerData::~BirdOptimizerData() {
  SharedDtor();
}

void BirdOptimizerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BirdOptimizerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BirdOptimizerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BirdOptimizerData_descriptor_;
}

const BirdOptimizerData& BirdOptimizerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2eproto();  return *default_instance_;
}

BirdOptimizerData* BirdOptimizerData::default_instance_ = NULL;

BirdOptimizerData* BirdOptimizerData::New() const {
  return new BirdOptimizerData;
}

void BirdOptimizerData::Clear() {
  result_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BirdOptimizerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.BirdOptimizerResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BirdOptimizerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.BirdOptimizerResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BirdOptimizerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.BirdOptimizerResult result = 1;
  for (int i = 0; i < this->result_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BirdOptimizerData::ByteSize() const {
  int total_size = 0;
  
  // repeated .proto.BirdOptimizerResult result = 1;
  total_size += 1 * this->result_size();
  for (int i = 0; i < this->result_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BirdOptimizerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BirdOptimizerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BirdOptimizerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BirdOptimizerData::MergeFrom(const BirdOptimizerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_.MergeFrom(from.result_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BirdOptimizerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BirdOptimizerData::CopyFrom(const BirdOptimizerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BirdOptimizerData::IsInitialized() const {
  
  for (int i = 0; i < result_size(); i++) {
    if (!this->result(i).IsInitialized()) return false;
  }
  return true;
}

void BirdOptimizerData::Swap(BirdOptimizerData* other) {
  if (other != this) {
    result_.Swap(&other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BirdOptimizerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BirdOptimizerData_descriptor_;
  metadata.reflection = BirdOptimizerData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
