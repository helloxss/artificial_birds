// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "wingbeat_pattern.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace proto {

namespace {

const ::google::protobuf::Descriptor* JointAngleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JointAngleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WingbeatPattern_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WingbeatPattern_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_wingbeat_5fpattern_2eproto() {
  protobuf_AddDesc_wingbeat_5fpattern_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "wingbeat_pattern.proto");
  GOOGLE_CHECK(file != NULL);
  JointAngleInfo_descriptor_ = file->message_type(0);
  static const int JointAngleInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointAngleInfo, wing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointAngleInfo, feather_),
  };
  JointAngleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JointAngleInfo_descriptor_,
      JointAngleInfo::default_instance_,
      JointAngleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointAngleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JointAngleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JointAngleInfo));
  WingbeatPattern_descriptor_ = file->message_type(1);
  static const int WingbeatPattern_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatPattern, angles_),
  };
  WingbeatPattern_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WingbeatPattern_descriptor_,
      WingbeatPattern::default_instance_,
      WingbeatPattern_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatPattern, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WingbeatPattern, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WingbeatPattern));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_wingbeat_5fpattern_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JointAngleInfo_descriptor_, &JointAngleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WingbeatPattern_descriptor_, &WingbeatPattern::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_wingbeat_5fpattern_2eproto() {
  delete JointAngleInfo::default_instance_;
  delete JointAngleInfo_reflection_;
  delete WingbeatPattern::default_instance_;
  delete WingbeatPattern_reflection_;
}

void protobuf_AddDesc_wingbeat_5fpattern_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026wingbeat_pattern.proto\022\005proto\"/\n\016Joint"
    "AngleInfo\022\014\n\004wing\030\001 \002(\002\022\017\n\007feather\030\002 \002(\002"
    "\"8\n\017WingbeatPattern\022%\n\006angles\030\001 \003(\0132\025.pr"
    "oto.JointAngleInfo", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wingbeat_pattern.proto", &protobuf_RegisterTypes);
  JointAngleInfo::default_instance_ = new JointAngleInfo();
  WingbeatPattern::default_instance_ = new WingbeatPattern();
  JointAngleInfo::default_instance_->InitAsDefaultInstance();
  WingbeatPattern::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_wingbeat_5fpattern_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_wingbeat_5fpattern_2eproto {
  StaticDescriptorInitializer_wingbeat_5fpattern_2eproto() {
    protobuf_AddDesc_wingbeat_5fpattern_2eproto();
  }
} static_descriptor_initializer_wingbeat_5fpattern_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int JointAngleInfo::kWingFieldNumber;
const int JointAngleInfo::kFeatherFieldNumber;
#endif  // !_MSC_VER

JointAngleInfo::JointAngleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JointAngleInfo::InitAsDefaultInstance() {
}

JointAngleInfo::JointAngleInfo(const JointAngleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JointAngleInfo::SharedCtor() {
  _cached_size_ = 0;
  wing_ = 0;
  feather_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JointAngleInfo::~JointAngleInfo() {
  SharedDtor();
}

void JointAngleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void JointAngleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JointAngleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JointAngleInfo_descriptor_;
}

const JointAngleInfo& JointAngleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wingbeat_5fpattern_2eproto();  return *default_instance_;
}

JointAngleInfo* JointAngleInfo::default_instance_ = NULL;

JointAngleInfo* JointAngleInfo::New() const {
  return new JointAngleInfo;
}

void JointAngleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wing_ = 0;
    feather_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JointAngleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float wing = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wing_)));
          set_has_wing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_feather;
        break;
      }
      
      // required float feather = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_feather:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &feather_)));
          set_has_feather();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JointAngleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float wing = 1;
  if (has_wing()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->wing(), output);
  }
  
  // required float feather = 2;
  if (has_feather()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->feather(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JointAngleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float wing = 1;
  if (has_wing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->wing(), target);
  }
  
  // required float feather = 2;
  if (has_feather()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->feather(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JointAngleInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float wing = 1;
    if (has_wing()) {
      total_size += 1 + 4;
    }
    
    // required float feather = 2;
    if (has_feather()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JointAngleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JointAngleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JointAngleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JointAngleInfo::MergeFrom(const JointAngleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wing()) {
      set_wing(from.wing());
    }
    if (from.has_feather()) {
      set_feather(from.feather());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JointAngleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JointAngleInfo::CopyFrom(const JointAngleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JointAngleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void JointAngleInfo::Swap(JointAngleInfo* other) {
  if (other != this) {
    std::swap(wing_, other->wing_);
    std::swap(feather_, other->feather_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JointAngleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JointAngleInfo_descriptor_;
  metadata.reflection = JointAngleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WingbeatPattern::kAnglesFieldNumber;
#endif  // !_MSC_VER

WingbeatPattern::WingbeatPattern()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WingbeatPattern::InitAsDefaultInstance() {
}

WingbeatPattern::WingbeatPattern(const WingbeatPattern& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WingbeatPattern::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WingbeatPattern::~WingbeatPattern() {
  SharedDtor();
}

void WingbeatPattern::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WingbeatPattern::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WingbeatPattern::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WingbeatPattern_descriptor_;
}

const WingbeatPattern& WingbeatPattern::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_wingbeat_5fpattern_2eproto();  return *default_instance_;
}

WingbeatPattern* WingbeatPattern::default_instance_ = NULL;

WingbeatPattern* WingbeatPattern::New() const {
  return new WingbeatPattern;
}

void WingbeatPattern::Clear() {
  angles_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WingbeatPattern::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.JointAngleInfo angles = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_angles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_angles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_angles;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WingbeatPattern::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .proto.JointAngleInfo angles = 1;
  for (int i = 0; i < this->angles_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->angles(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WingbeatPattern::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .proto.JointAngleInfo angles = 1;
  for (int i = 0; i < this->angles_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->angles(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WingbeatPattern::ByteSize() const {
  int total_size = 0;
  
  // repeated .proto.JointAngleInfo angles = 1;
  total_size += 1 * this->angles_size();
  for (int i = 0; i < this->angles_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->angles(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WingbeatPattern::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WingbeatPattern* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WingbeatPattern*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WingbeatPattern::MergeFrom(const WingbeatPattern& from) {
  GOOGLE_CHECK_NE(&from, this);
  angles_.MergeFrom(from.angles_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WingbeatPattern::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WingbeatPattern::CopyFrom(const WingbeatPattern& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WingbeatPattern::IsInitialized() const {
  
  for (int i = 0; i < angles_size(); i++) {
    if (!this->angles(i).IsInitialized()) return false;
  }
  return true;
}

void WingbeatPattern::Swap(WingbeatPattern* other) {
  if (other != this) {
    angles_.Swap(&other->angles_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WingbeatPattern::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WingbeatPattern_descriptor_;
  metadata.reflection = WingbeatPattern_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
